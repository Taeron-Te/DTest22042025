from typing import Any, Tuple
import ast
from dto.Operands import Operand, OperandType


class Code_generator:
    code_was_gendered = 0
    generated_file_names = []

    def __init__(s, txt: str, a: Any, o: Operand):
        s.txt = txt
        s.a = a
        if isinstance(o, Operand):
            print("I1")
            s.o = o.operand.value
        else:
            s.o = o

    def __call__(s, *args, **kwargs):
        s.primitive_generate()

    def _add(self, fn):
        Code_generator.code_was_gendered += 1
        Code_generator.generated_file_names.append(fn)

    def setQ(self, txt):
        self.txt = txt

    def setA(self, a):
        self.a = a

    def setO(self, o):
        self.o = o

    def fullSet(self, txt, a, o):
        self.txt = txt
        self.a = a
        self.o = o

    def primitive_generate(s, f=''):
        filename = f
        if filename == 'LAST' and Code_generator.generated_file_names != []:
            filename = Code_generator.generated_file_names.pop()
        if filename == '':
            filename = 'f' + str(s.__hash__())
        generated = f'''
def {filename}():
    print("{s.txt}")
    b = input()
    if "{s.a}" {s.o} b:
        
        f153939966999()
        return True
    else: return False       
'''

        with open(f"generated/{filename}.py", 'w', encoding='utf-8') as file:
            file.write(generated)

        s._add(filename)
        print(filename)
        return filename

    def add_primitive(s, f):
        flag = False
        filename = f
        if filename == 'LAST' and Code_generator.generated_file_names != []:
            filename = Code_generator.generated_file_names.pop()
            print(filename)
            flag = True
        elif filename == '' or filename not in Code_generator.generated_file_names:
            print("Файл с данным именем не существует")
            s.primitive_generate()

        generated = f'''
def {filename}():
    print("{s.txt}")
    b = input()
    if "{s.a}" {s.o.operand} b:
        return True
    else: return False

    '''
        with open(f"generated/{filename}.py", 'a', encoding='utf-8') as file:
            file.write(generated)
        if flag:
            s._add(filename)
        print("added to ", filename)
        return filename

    def match_generate(s, f=''):
        filename = f
        if filename == '':
            filename = 'm' + str(s.__hash__())
        generated = ''
        if not isinstance(s.a, list):
            print("IS NOT LIST", s.a)
            s.primitive_generate(filename)

        else:
            generated = f'''
def {filename}():
    print("{s.txt}")
    b = input("{s.a}")
    match b.split():
'''
            for i in s.a:
                generated += f'''
                
        case ["{i}"]:
            print("{i}")'''
            generated += f'''
        case _:
            print("default")'''

        with open(f"generated/{filename}.py", 'w', encoding='utf-8') as file:
            file.write(generated)

        s._add(f'generated/{filename}.py')
        print(filename)
        return filename

    def generated_code(s, f='', code=''):
        filename = f
        if filename == '':
            filename = 'f' + str(s.__hash__())
        generated: str
        if code == '':
            generated = """
print(f'AUTOGENERATED_CODE')"""
        else: generated = code

        with open(f"generated/{filename}.py", 'w', encoding='utf-8') as file:
            file.write(generated)

        s._add(filename)
        print(filename)
        return filename